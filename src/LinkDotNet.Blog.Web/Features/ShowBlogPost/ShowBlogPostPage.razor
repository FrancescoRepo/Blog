@page "/blogPost/{blogPostId}/{slug?}"
@using System.Text
@using Markdig
@using LinkDotNet.Blog.Domain
@using LinkDotNet.Blog.Infrastructure.Persistence
@using LinkDotNet.Blog.Web.Features.Services
@using LinkDotNet.Blog.Web.Features.ShowBlogPost.Components
@using LinkDotNet.Blog.Web.Features.SupportMe.Components
@inject IRepository<BlogPost> BlogPostRepository
@inject IRepository<ShortCode> ShortCodeRepository
@inject IJSRuntime JsRuntime
@inject IUserRecordService UserRecordService

@if (isLoading)
{
    <Loading></Loading>
}
else if (!isLoading && BlogPost is null)
{
   <NoBlogPosts/>
}
else if (BlogPost is not null)
{
    <BlogPostDetail BlogPost="@BlogPost" IsPreview="false" ShortCodes="shortCodes" />
}

@code {
    [Parameter, EditorRequired]
    public required string BlogPostId { get; set; }

    [Parameter]
    public string? Slug { get; set; }

    private bool isLoading;

    private IReadOnlyCollection<ShortCode> shortCodes = [];

    private BlogPost? BlogPost { get; set; }

    protected override async Task OnInitializedAsync()
    {
        shortCodes = await ShortCodeRepository.GetAllAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        BlogPost = await BlogPostRepository.GetByIdAsync(BlogPostId);
        isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("hljs.highlightAll");
        _ = UserRecordService.StoreUserRecordAsync();
    }
}
